#!/bin/bash

# Create fancy prompt


function exit2msg_error_msg() {
    # Print error message 
    #   $1 = exit code, assumed to follow sysexit.h convention
    local errorno="$1"
    case "$errorno" in
        0) echo "Success"  ;;
        1) echo "Miscellaneous/Syntax error"  ;;
        2) echo "Misuse of shell builtin"  ;;
        3) echo "Unknown error ('No such process' or 'Errors selecting input/output files, dirs'?)" ;;
        4) echo "Unknown error (Interrupted system call?)" ;;
        5) echo "Unknown error ('I/O error' or 'Error starting client-server protocol'?)" ;;
        6) echo "Unknown error (No such device or address?)" ;;
        7) echo "Unknown error (Argument list too long?)" ;;
        8) echo "Unknown error (Exec format error?)" ;;
        9) echo "Unknown error (Bad file number?)" ;;
       10) echo "Unknown error (No child processes?)" ;;
       11) echo "Unknown error (Try again?)" ;;
       12) echo "Unknown error (Out of memory?)" ;;
       13) echo "Unknown error (Permission denied?)" ;;
       14) echo "Unknown error (Bad address?)" ;;
       15) echo "Unknown error (Block device required?)" ;;
       16) echo "Unknown error (Device or resource busy?)" ;;
       17) echo "Unknown error (File exists?)" ;;
       18) echo "Unknown error (Cross-device link?)" ;;
       19) echo "Unknown error (No such device?)" ;;
       20) echo "Unknown error (Not a directory?)" ;;
       21) echo "Unknown error (Is a directory?)" ;;
       22) echo "Unknown error (Invalid argument?)" ;;
       23) echo "Unknown error ('File table overflow' or 'Partial transfer due to error'?)" ;;
       24) echo "Unknown error ('Too many open files' or 'partial transfer dues to vanished source files'?)" ;;
       25) echo "Unknown error (Not a typewriter?)" ;;
       26) echo "Unknown error (Text file busy?)" ;;
       27) echo "Unknown error (File too large?)" ;;
       28) echo "Unknown error (No space left on device?)" ;;
       29) echo "Unknown error (Illegal seek?)" ;;
       30) echo "Unknown error (Read-only file system?)" ;;
       31) echo "Unknown error (Too many links?)" ;;
       32) echo "Unknown error (Broken pipe?)" ;;
       33) echo "Unknown error (Math argument out of domain of func?)" ;;
       34) echo "Unknown error (Math result not representable?)" ;;
       64) echo "Command line usage error or general error" ;;
       65) echo "Data format error"  ;;
       66) echo "Cannot open input"  ;;
       67) echo "Addressee unknown"  ;;
       68) echo "Host name unknown"  ;;
       69) echo "Service unavailable"  ;;
       70) echo "Internal software error"  ;;
       71) echo "Operating system error"  ;;
       72) echo "Critical OS file missing (syntax error)"  ;;
       73) echo "Cannot create (user) output file"  ;;
       74) echo "Input/output error"  ;;
       75) echo "Temporary failure (try again)"  ;;
       76) echo "Remote error in protocol"  ;;
       77) echo "Permission denied"  ;;
       78) echo "Configuration error"  ;;
      126) echo "Command invoked cannot execute"  ;;
      127) echo "Command not found"  ;;
      128) echo "Invalid argument to exit"  ;;
      129) echo "Fatal error 1"  ;;
      130) echo "Script terminated by Ctrl-C"  ;;
      131) echo "Fatal error 2"  ;;
      148) echo "Stopped" ;;
      255) echo "Exit status out of range"  ;;
        *) if (( "$errorno" > 128 && "$errorno" < 255 )); then
              let errorno="errorno-128"
              echo "Fatal error $errorno" 
           else
               echo "Unknown error" 
           fi
           ;;
    esac
}

function checkerr() {
    command=$(HISTTIMEFORMAT='' history 1 | sed 's/.*=.*//g' | awk '{print $2}')
    if [ "$1" != "0" ]; then
        echo -e "\033[31;1m$PSERR  '$command': Exit code $(exit2msg_error_msg  $1) \033[0m\012\015"
        echo ""
    else
        echo -e "\033[32;1m$PSOK\033[0m\012\015"
    fi   
}

PSSTYLE=${1:-checkmarks}
case ${PSSTYLE} in
    "thumbs")
        export PSERR="👎"
        export PSOK="👍"
        export PS1='\[\033[0;37m\]$(checkerr $?)\[\033[34;0m\]⊂⊃ \D{%F %T} \033[37;1m$(git branch --show-current 2>/dev/null;true)\033[0m ⊂⊃ \[\033[0m\]\n\[\033[34;1m\]'${USER}'@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[0m\]\n\$ '
        ;;
    "checkmarks")
        export PSERR="❌"
        export PSOK="✅"
        export PS1='\[\033[0;37m\]$(checkerr $?)\[\033[34;0m\]⊂⊃ \D{%F %T} \033[37;1m$(git branch --show-current 2>/dev/null;true)\033[0m ⊂⊃ \[\033[0m\]\n\[\033[34;1m\]'${USER}'@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[0m\]\n\$ '
        ;;
    *) false;;
esac
